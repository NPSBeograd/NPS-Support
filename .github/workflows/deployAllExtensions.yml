name: 'Deploy All Extensions'
on: 
    workflow_dispatch:

        inputs:
            Publishing_Stategy:
                type: choice
                description: Pick deployment strategy
                options:
                - CD
                - Publish
                required: true
            Environmet_name:
                description: Environment name
                required: true
            Environmet_deployment:
                description: If Publish enter PROD* for production or FAT* for FAT
                required: false

            BusinessCentralLocalization:
                type: boolean
                default: true
            
            TravelOrder:
                type: boolean
                default: true
            
            Manufacturing:
                type: boolean
                default: true
            
            EIN:
                type: boolean
                default: true
            
            HrmPayroll:
                type: boolean
                default: true

            EinLoc:
                type: boolean
                default: true

            Translation:
                type: boolean
            
jobs:

 Initialization:

          runs-on: [ windows-latest ]
          outputs:
            telemetryScopeJson: ${{ steps.init.outputs.telemetryScopeJson }}
            environmentsMatrixJson: ${{ steps.DetermineDeploymentEnvironments.outputs.EnvironmentsMatrixJson }}
            environmentCount: ${{ steps.DetermineDeploymentEnvironments.outputs.EnvironmentCount }}
            deploymentEnvironmentsJson: ${{ steps.DetermineDeploymentEnvironments.outputs.DeploymentEnvironmentsJson }}
            deliveryTargetsJson: ${{ steps.DetermineDeliveryTargets.outputs.DeliveryTargetsJson }}
            readEnvName: ${{ steps.ReadEnvironmentName.outputs.READ_ENV_NAME }}
          steps:
            - name: Checkout
              uses: actions/checkout@v3
              with:
                lfs: true

            - name: Resolve Environment
              shell: powershell
              id: ResolveEnvironment
              run: |
                 $deployment = "${{ github.event.inputs.Environmet_deployment }}"
                 $resolvedEnv=""
                 if ($deployment.StartsWith("PROD") -or $deployment.StartsWith("FAT")) {
                  $resolvedEnv=./script/ResovleEnvironment.ps1 -Publishing_Stategy "${{ github.event.inputs.Publishing_Stategy }}"  -Environmet_deployment $deployment
                 }
                 else {
                  $resolvedEnv=./script/ResolveEnvironment.ps1 -Publishing_Stategy "${{ github.event.inputs.Publishing_Stategy }}"
                 }
                  echo "resolved_Env=$resolvedEnv" >> "$GITHUB_ENV"
              
            - name : Add Settings Environment
              shell: powershell
              run: |
                 ./script/AddSettingsEnvironment.ps1 -EnvironmentName "${{ github.event.inputs.Environmet_name }}" -ResolvedEnvironmentName "$resolved_Env"

            - name : Read Environment Name
              shell: powershell
              id: ReadEnvironmentName
              run: |
               $readEnvName=./script/ReadEnvironmentName.ps1
               echo "READ_ENV_NAME=$readEnvName" >> "$GITHUB_OUTPUT"

      
            - name: Initialize the workflow
              id: init
              uses: microsoft/AL-Go-Actions/WorkflowInitialize@v4.0
              with:
                shell: powershell
                eventId: "DO0091"

            - name: Read settings
              id: ReadSettings
              uses: microsoft/AL-Go-Actions/ReadSettings@v4.0
              with:
                  shell: powershell
                  get: type

            - name: Determine Delivery Target Secrets
              id: DetermineDeliveryTargetSecrets
              uses: microsoft/AL-Go-Actions/DetermineDeliveryTargets@v4.0

              with:
                shell: powershell
                checkContextSecrets: 'N'
      
            - name: Read secrets
              id: ReadSecrets
              uses: microsoft/AL-Go-Actions/ReadSecrets@v4.0

              with:
                shell: powershell
                gitHubSecrets: ${{ toJson(secrets) }}
                getSecrets: ${{ steps.DetermineDeliveryTargetSecrets.outputs.ContextSecrets }}
      
            - name: Determine Delivery Targets
              id: DetermineDeliveryTargets
              uses: microsoft/AL-Go-Actions/DetermineDeliveryTargets@v4.0

              env:
                Secrets: '${{ steps.ReadSecrets.outputs.Secrets }}'
              with:
                shell: powershell
                checkContextSecrets: 'Y'

            - name: Determine Deployment Environments
              id: DetermineDeploymentEnvironments
              uses: microsoft/AL-Go-Actions/DetermineDeploymentEnvironments@v4.0

              env:
                GITHUB_TOKEN: ${{ github.token }}
              with:
                shell: powershell
                getEnvironments: '*'
                type: '${{ github.event.inputs.Publishing_Stategy}}'
           
 Deploy:
    needs: [Initialization]

    runs-on:  [ windows-latest ]
    name: Deploy to ${{ github.event.inputs.Environmet_name }}
    environment:
      name: ${{ github.event.inputs.Environmet_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download artifacts
        shell: powershell
        run: |
          ./script/DownloadLatestReleases.ps1 -BusinessCentralLocalization ${{github.event.inputs.BusinessCentralLocalization}} -TravelOrder ${{github.event.inputs.TravelOrder}} -Manufacturing ${{github.event.inputs.Manufacturing}} -EIN ${{github.event.inputs.EIN}} -HrmPayroll ${{github.event.inputs.HrmPayroll}} -EinLoc ${{github.event.inputs.EinLoc}}  -Translation ${{github.event.inputs.Translation}} -token ${{ SECRETS.GHTOKENWORKFLOW}}

      - name: Resolve Environment
        shell: powershell
        id: ResolveEnvironment
        run: |
             $deployment = "${{ github.event.inputs.Environmet_deployment }}"
             $resolvedEnv=""
             if ($deployment.StartsWith("PROD") -or $deployment.StartsWith("FAT")) {
              $resolvedEnv=./script/ResovleEnvironment.ps1 -Publishing_Stategy "${{ github.event.inputs.Publishing_Stategy }}"  -Environmet_deployment $deployment
             }
             else {
              $resolvedEnv=./script/ResolveEnvironment.ps1 -Publishing_Stategy "${{ github.event.inputs.Publishing_Stategy }}"
             }
              echo "resolved_Env=$resolvedEnv" >> "$GITHUB_ENV"
          
      - name : Add Settings Environment
        shell: powershell
        run: |
             ./script/AddSettingsEnvironment.ps1 -EnvironmentName "${{ github.event.inputs.Environmet_name }}" -ResolvedEnvironmentName "$resolved_Env"

      - name : Read Environment Name
        shell: powershell
        id: ReadEnvironmentNameDeploy
        run: |
           $readEnvName=./script/ReadEnvironmentName.ps1
           echo "READ_ENV_NAME=$readEnvName" >> "$GITHUB_OUTPUT"

      - name: Read settings
        uses: microsoft/AL-Go-Actions/ReadSettings@v4.0
        with:
           shell: powershell
 
      - name: EnvName
        id: envName
        run: |
           $errorActionPreference = "Stop"; $ProgressPreference = "SilentlyContinue"; Set-StrictMode -Version 2.0
           $envName = '${{ github.event.inputs.Environmet_name  }}'
           Add-Content -Encoding UTF8 -Path $env:GITHUB_OUTPUT -Value "envName=$envName"
      
      - name: Read secrets
        id: ReadSecrets
        uses: microsoft/AL-Go-Actions/ReadSecrets@v4.0
        with:
          shell: powershell
          gitHubSecrets: ${{ toJson(secrets) }}
          getSecrets: '${{ steps.envName.outputs.envName }}-AuthContext,${{ steps.envName.outputs.envName }}_AuthContext,AuthContext,${{ steps.envName.outputs.envName }}-EnvironmentName,${{ steps.envName.outputs.envName }}_EnvironmentName,EnvironmentName,projects'


      - name: Deploy
        uses: microsoft/AL-Go-Actions/Deploy@v4.0

        env:
          Secrets: '${{ steps.ReadSecrets.outputs.Secrets }}'
        with:
          shell: powershell
          environmentName: ${{ steps.ReadEnvironmentNameDeploy.outputs.READ_ENV_NAME }}
          artifacts: '.artifacts'
          type: '${{ github.event.inputs.Publishing_Stategy}}'

          deploymentEnvironmentsJson: ${{ needs.Initialization.outputs.deploymentEnvironmentsJson }}