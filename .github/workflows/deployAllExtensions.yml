name: 'Deploy All Extensions'
on: 
    workflow_dispatch:

        inputs:
            Publishing_Stategy:
                type: choice
                description: Pick deployment strategy
                options:
                - CD
                - Publish
                required: true
            Environmet_name:
                description: Environment name
                required: true
            Environmet_deployment:
                description: If Publish enter PROD* for production or FAT* for FAT
                required: false

            BusinessCentralLocalization:
                type: boolean
                default: true
            
            TravelOrder:
                type: boolean
                default: true
            
            Manufacturing:
                type: boolean
                default: true
            
            EIN:
                type: boolean
                default: true
            
            HrmPayroll:
                type: boolean
                default: true

            EinLoc:
                type: boolean
                default: true

            Translation:
                type: boolean
            
jobs:

 Create_secrets:
    runs-on: windows-latest

    steps:
        - name: Checkout
          uses: actions/checkout@v3
          with:
            lfs: true
        
        - name: Create secrets
          shell: powershell
          run: |
           $deployment = "${{ github.event.inputs.Environmet_deployment }}"
           if ($deployment.StartsWith("PROD") -or $deployment.StartsWith("FAT")) {
            ./script/CreateSecrets.ps1 -Token "${{ secrets.GHTOKENWORKFLOW }}" -Environmet_name "${{ github.event.inputs.Environmet_name }}" -Environmet_deployment $deployment -Publishing_Stategy "${{ github.event.inputs.Publishing_Stategy }}"
           } else {
            ./script/CreateSecrets.ps1 -Token "${{ secrets.GHTOKENWORKFLOW }}" -Environmet_name "${{ github.event.inputs.Environmet_name }}" -Publishing_Stategy "${{ github.event.inputs.Publishing_Stategy }}"
           }

 Initialization:
          needs: [Create_secrets]
          runs-on: [ windows-latest ]
          outputs:
            telemetryScopeJson: ${{ steps.init.outputs.telemetryScopeJson }}
            environmentsMatrixJson: ${{ steps.DetermineDeploymentEnvironments.outputs.EnvironmentsMatrixJson }}
            environmentCount: ${{ steps.DetermineDeploymentEnvironments.outputs.EnvironmentCount }}
            deploymentEnvironmentsJson: ${{ steps.DetermineDeploymentEnvironments.outputs.DeploymentEnvironmentsJson }}
            deliveryTargetsJson: ${{ steps.DetermineDeliveryTargets.outputs.DeliveryTargetsJson }}
          steps:
            - name: Checkout
              uses: actions/checkout@v3
              with:
                lfs: true
      
            - name: Initialize the workflow
              id: init
              uses: microsoft/AL-Go-Actions/WorkflowInitialize@v3.3
              with:
                shell: powershell
                eventId: "DO0091"
            
            - name: Determine Delivery Target Secrets
              id: DetermineDeliveryTargetSecrets
              uses: microsoft/AL-Go-Actions/DetermineDeliveryTargets@v3.3
              with:
                shell: powershell
                checkContextSecrets: 'N'
      
            - name: Read secrets
              id: ReadSecrets
              uses: microsoft/AL-Go-Actions/ReadSecrets@v3.3
              with:
                shell: powershell
                gitHubSecrets: ${{ toJson(secrets) }}
                getSecrets: ${{ steps.DetermineDeliveryTargetSecrets.outputs.ContextSecrets }}
      
            - name: Determine Delivery Targets
              id: DetermineDeliveryTargets
              uses: microsoft/AL-Go-Actions/DetermineDeliveryTargets@v3.3
              env:
                Secrets: '${{ steps.ReadSecrets.outputs.Secrets }}'
              with:
                shell: powershell
                checkContextSecrets: 'Y'
      
            - name: Determine Deployment Environments
              id: DetermineDeploymentEnvironments
              uses: microsoft/AL-Go-Actions/DetermineDeploymentEnvironments@v3.3
              env:
                GITHUB_TOKEN: ${{ github.token }}
              with:
                shell: powershell
                getEnvironments: '*'
                type: '${{ github.event.inputs.Environmet_deployment}}'

            - name: Resolve Environment
              id: ResolveEnvironment
              shell: powershell
              run: |
                 $EnvOutput = ./script/ResolveEnvironment.ps1 -Publishing_Stategy ${{ github.event.inputs.Publishing_Stategy}} -Environmet_deployment ${{ github.event.inputs.Environmet_deployment}}
                 echo "::set-env name=ENV_OUTPUT::$EnvOutput"

            - name: Authenticate
              id: Authenticate
              if: steps.DetermineDeploymentEnvironments.outputs.UnknownEnvironment == 1
              run: |
                  $envName = '${{ github.event.inputs.Environmet_name }}'
                  $secretName = ''
                  $secrets = '${{ steps.ReadSecrets.outputs.Secrets }}' | ConvertFrom-Json
                  $authContext = $null
                  "$($envName)-AuthContext", "$($envName)_AuthContext", "AuthContext" | ForEach-Object {
                    if (!($authContext)) {
                      if ($secrets."$_") {
                        Write-Host "Using $_ secret as AuthContext"
                        $authContext = $secrets."$_"
                        $secretName = $_
                      }
                    }
                  }
                  if ($authContext) {
                    Write-Host "AuthContext provided in secret $secretName!"
                    Set-Content -Path $ENV:GITHUB_STEP_SUMMARY -value "AuthContext was provided in a secret called $secretName. Using this information for authentication."
                  }
                  else {
                    Write-Host "No AuthContext provided for $envName, initiating Device Code flow"
                    $ALGoHelperPath = "$([System.IO.Path]::GetTempFileName()).ps1"
                    $webClient = New-Object System.Net.WebClient
                    $webClient.DownloadFile('https://raw.githubusercontent.com/microsoft/AL-Go-Actions/v3.3/AL-Go-Helper.ps1', $ALGoHelperPath)
                    . $ALGoHelperPath
                    DownloadAndImportBcContainerHelper
                    $authContext = New-BcAuthContext -includeDeviceLogin -deviceLoginTimeout ([TimeSpan]::FromSeconds(0))
                    Set-Content -Path $ENV:GITHUB_STEP_SUMMARY -value "AL-Go needs access to the Business Central Environment $('${{ github.event.inputs.Environmet_name }}'.Split(' ')[0]) and could not locate a secret called ${{ env.ENV_OUTPUT }}_AuthContext`n`n$($authContext.message)"
                    Add-Content -Encoding UTF8 -Path $env:GITHUB_OUTPUT -Value "deviceCode=$($authContext.deviceCode)"
                  }

 Deploy:
    needs: [Initialization]
    runs-on:  [ windows-latest ]
    name: Deploy to ${{ github.event.inputs.Environmet_name }}
    environment:
      name: ${{ github.event.inputs.Environmet_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download artifacts
        shell: powershell
        run: |
         ./script/DownloadLatestReleases.ps1 -BusinessCentralLocalization ${{ github.event.inputs.BusinessCentralLocalization}} -TravelOrder ${{github.event.inputs.TravelOrder}} -Manufacturing ${{github.event.inputs.Manufacturing}} -EIN ${{github.event.inputs.EIN}} -HrmPayroll ${{github.event.inputs.HrmPayroll}} -EinLoc ${{github.event.inputs.EinLoc}} -Translation ${{ github.event.inputs.Translation}} -token ${{ SECRETS.GHTOKENWORKFLOW}}

      - name: Resolve Environment
        id: ResolveEnvironment
        shell: powershell
        run: |
         $EnvOutput = ./script/ResolveEnvironment.ps1 -Publishing_Stategy ${{ github.event.inputs.Publishing_Stategy}} -Environmet_deployment ${{ github.event.inputs.Environmet_deployment}}
         echo "::set-env name=ENV_OUTPUT::$EnvOutput"


      - name: Read secrets
        id: ReadSecrets
        uses: microsoft/AL-Go-Actions/ReadSecrets@v3.3
        with:
          shell: powershell
          gitHubSecrets: ${{ toJson(secrets) }}
          getSecrets: '${{env.ENV_OUTPUT}}_AuthContext,AuthContext,${{ github.event.inputs.Environmet_name }}_EnvironmentName,EnvironmentName,projects'

      - name: Deploy
        uses: microsoft/AL-Go-Actions/Deploy@v3.3
        env:
          Secrets: '${{ steps.ReadSecrets.outputs.Secrets }}'
        with:
          shell: powershell
          environmentName: ${{ github.event.inputs.Environmet_name }}
          artifacts: '.artifacts'
          type: '${{ github.event.inputs.Environmet_deployment}}'
          deploymentEnvironmentsJson: ${{ needs.Initialization.outputs.deploymentEnvironmentsJson }}